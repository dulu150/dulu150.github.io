---
layout: post
title:  "策略模式详解"
date:   2017-04-26 11:34:01 +0800
categories: jekyll update
---

# 为什么要用策略模

## 前奏
面向对象的设计原则也是为了最大程度上做到代码复用、解耦。
如果以实际的指标衡量，那么如果改动代码的时候，能够做到
改动的代码行数最少，代码接口最清晰，新人最容易理解。
那这份代码就是一份好代码。
不是所有应用了设计模式的代码都是好代码，代码设计的过程
中还有过度设计一词。

## 策略模式
策略模式和工厂方法很像，它们两个其实体现的都是面向对象的  
基本原理：多态。继承我就不说了，这个已经被用滥了。  

##### 闲话少许上代码：现在我们有一个需求，实现计算器计算输入a,b的 “+,-,*,/”的结果。  
`过程式语言怎么写呢： ` 
calculator.c  
```c
int Calculate(int a, int b, char oper)
{
	switch (oper)
	{
		case "+":
			return a + b;
		case "-":
			return a - b;
		case "*":
			return a * b;
		calse "/"
			return a / b;
	}
}
```
这样做的缺点就是，如果将来我们要实现别的操作。比如平方，那么我们就必须去修改.c文件，
这个.c文件必须重新编译。当然你可以说我的代码多分几个.c就行了。但是这样有一个问题就是
代码分散的太厉害，反而不利于阅读。读代码的过程中，大家都希望强相关的功能都放到一个.c中
		
`我们再看OOP是如何解决这个问题的：`
```java
abstact class Caculate()
{
	public GetResult();
}


##### 注：markdown语法参考 http://www.tuicool.com/articles/zIJrEjn